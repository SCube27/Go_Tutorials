# For Setting up a GO project:

1. Create a directory ```mkdir <directory_name>```
2. ```cd <directory_name>```
3. Create a modules file for GO inside the directory ```go mod init <module_name>```
4. Start creating your files and writing code

# Short Notes:

PACKAGES:
1. In GO there are no classes rather we use packages to write files. Every file should contain a package name in their header, that indicates this particular file belongs to this particular package.
2. The main package is a special package in GO, an executable program should contain a main package.
3. [IMP] In GO, in a single directory all files should be under same package, this means in a directory if a file already contains a package main, then we can't create a new file with another package.
4. We created a utils folder, it contains a file with package name 'myutil' so now all the files in this folder should be under package myutil.

VARIABLES:
1. In GO, variables are defined by the var keyword followed by their name and datatype of the variable, this can be showed as ```var name string = "Sahil"```
2. We can also store variables without defining its datatype, which later on during compile time will be automatically assumed by the GO compiler, this is as follows ```var name = "Sahil"```
3. [IMP] In the first case the variable is declared to be a string and hence no other kind of data can be stored in it, on the other hand in the second case the variable is kept on an open end so it has no definite datatype and hence its datatype can be changed whenever required.
4. Variables that are defined using const keyword will have a constant value and their values won't change. So once assigned their values can't be reassigned in the same file. (Same like JavaScript)
5. [IMP] We can also declare a variable without its type (var, const) and without its datatype using the `:=` operator. This is usually used when taking and storing a value from a called function.

PRINT STATEMENTS:
1. Println() : This function is usually adds a space between print string and variables being printed. Besides it also assumes new Println() function will print on new line, so everytime an new Println() function will be added in the code it will be printed on a new line.
2. Printf() : This function is usually used for formatting strings present in it, in user specific way using format specifiers (%d for specifying integers, %f for float values, %T for type of variables, %s for strings). This function doesnt do anything on its own, even to move the cursor to the next line we've to specify here '\n'. So even if there are multiple Printf() lines in the code they'll be printed in the same line if not specified.
3. The format specifiers are basically represent the associated variables passed in the function, these specifiers are replaced by the variables during the compile time.

USER INPUTS:
1. To read the inputs from the user, for a normal program we usually use the Scan() method from the `fmt` package.
2. We can declare a variable and insert the console input into that variable using the Scan() method, as it scans for input in the console.
3. The problem with the Scan() is that is only reads a string either until it's end or if it reaches a whitespace so the strings like "Roronoa Zoro" won't work.
4. For this we can use the NewReader() function from the bufio package. 
5. This creates a new buffered reader that reads through the console or standard input (Stdin this function is in the os package). 

FUNCTIONS:
1. A function in GO is declared using the 'func' keyword continued by function name.
2. The datatypes of the parameters are declared after the signature same as declaring a variable.
3. The return type of the function is stated after the parameters of the function are stated. Outside the parenthesis.
4. If there are multiple parameters of same type in the function then we can declare the data type only once too. For e.g 
    ```
    func numbers(a, b, c int) {

    }
    ```
5. In above example all the numbers are of same types.
6. If we declare a named variable in the return type then we don't need to specify the variable while returning, only return statement works.
7. If a function has multiple return types then we can declare them inside parenthesis after the parameters.

ERROR HANDLING:
1. [IMP] The error handling in GO can be done using returning multiple datatypes from the function, one will be the functions general return type and other would be the error to be returned.
2. This means while returning any vaule from the function either it is a normal case or an error case, we return multiple values. One will be the actual output and other would be the error to be returned.
3. In normal case where there are no errors, we can return `nil` instead of error, representing no error.
4. [IMP] Now when, calling such functions and storing the values in the variables there are multiple values incoming which means they can't be stored in a single variable. For this we use the underscore (_) identifier alongside the normal variable.
5. The underscore variable represents values that are not so important and can be ignored and discarded. Since error is incoming which is of no longer use in the further functioning of program we store it in `_` so it's discarded.
6. We can also use a normal variable named `err` too instead of `_` but then the program would suggest to use it which isn't the case in `_` identifier.
7. For dedicated errors present in the function using `error` data type (inbuilt Golang datatype) is recommended to the users. Such errors can be returned using the `Errorf()` method of `fmt` package.

ARRAYS:
1. The declaration of arrays in Golang is same as declaration of variables.
2. The simple difference is we define a pair of square brackets `[]` and size of array in them before the datatype of the array.
For e.g ``` var langs [5]string ```
3. To initialize the array we create a variable and define its size, data type and contents in `{}`
For e.g ``` var numbers = [5]int {1,2,3,4,5} ```
4. We've a `len()` function in Golang to check for the length of the array passed in it.
5. The default values for an array while declaring it, for int it would be 0, for string it would be "", for bool it would be false, for pointers it would be nil.

SLICES:
1. In Go, a slice is a flexible and dynamic data structure, that is a powerful alternative to the normal arrays just like vectors in C++.
2. Unlike arrays slices are dynamic and their sizes can be changed during the program's execution.
3. A slice is declared in the same way as an array in the following format : ```numbers := []int{1,2,3,4,5}```
4. Basically we don't define the size in the square brackets `[]` while declaring a slice.
5. We can create a slice using the ```make``` function too. We just have to pass the size and capacity of the slice we want to make. Before showing the implementation lets know what is the size of a slice and what is capacity.
6. [IMP] In simple words, the size of the slice is the spaces of the slice used while the capacity of the slice is the actual number of elements it can store. Basically if a slice can store 5 elements then its capacity would be 5, but it has stored only 3 elements hence its size would be 3.
7. [IMP] If we try to store the data beyond the capacity of a slice then its capacity is dunamically doubled.
8. We use the cap() function to find the capacity of a slice while len() function to find the size/length of the slice.
9. The syntax to create a slice using make() : ```numbers = make([]int, 3, 5)``` -> datatype, size, capacity

IF-ELSE CONDITIONALS:
1. The standard if-else. Is is written in strictly following format
E.g ```
    if x == 10 {
        // print smthg
    } else {
        // print smthg
    }
```
2. Else should always start at the line where if ends.
3. Same goes for ```else if``` statement.
4, We dont put parenthesis during writing the conditions in if-else in GO.

SWITCH CASE:
1. In the switch case, we've multiple cases (same as the conditions in if-else) just same as any other language.
2. Here we can add multiple values in a single case to check, if the value matches any of the values of a single case then that particular case is triggered.
3. Similarly we can also add expressions in switch case such as >=, >, <=, < etc.

FOR LOOPS:
1. In Golang we just have for loops, we dont have while or any other kind of loops in Golang.
2. The loop is written same as we write in any other language.
3. We can implement the for loop over an iterable object such as array, slice, strings etc using ```range``` keyword to implement in simple and easier manner.

MAPS:
1. In GO a map is a data structure that provides an unordered collection of key-value pairs where each key must be unique.
2. Maps in Golang are similar to dictionaries in Python or hashmaps in C++ where we can store values in key value pairs.
3. There's no particular order in which the values are stored in the maps. As new values come they are stored in the map, without maintaining any particular order in the map.
4, The retrieval of the values in the map happen through the keys associated with those values. This is quite an efficient way of retrieval as every value will have its own specific unique key.
5. The syntax to declare a map is ```<map_name> := make(map[<datatype-key>]<datatype-value>)```
6. [IMP] The keys are case sensitive and hence we should provide exact keys while retrieving the values.
7. We've a delete() function in Golang that takes, map name and key as input and deletes the corresponding key-value pair from the map.
8. [IMP] If we access a key from the map, it returns two values, a. The value it is associated with, b. if the key exists in the map (true or false)
9. The map keeps an unordered way of storing the values, hence we won't get values in the same order always also the size of the map is dynamic and hence many values can be stored in it.

STRUCT:
1. In GO, a struct (short form for structure) is a composite datatype that stores multiple variables (fields or members) under a single name.
2. Each field (variable) inside the struct can have a different datatype, and structs can be used to develop complex data structures.
3. There are three separate methods through which we can create a struct data structure.
4. [VERY IMP] We can create a complex structure to store end to end data of anything. Like in code we've created a complex data structure to store the employee details. Where we created a struct to store the data members that are struct themselves.

POINTERS:
1. In Go, the pointers are variables that store the address of other variables in themselves. They are indirectly used to refer to the value stored in a variable rather than the value itself.
2. They provide a way to work with the memory directly to do memory efficient tasks such as memory management and sharing the ddta between functions.
3. A pointer is declared as following ```var ptr *int```, so we use a * with the data type while making the pointer. Now this pointer can only point to a variable of type int. 

STRINGS:
1. The strings package in Go provides a variety of functions for manipulating strings.

TIME:
1. Go provides the time package for handling time and time related operations.
2. The time format that is followed in the Golang is "YYYY-MM-DD HH:mm:ss" so for example "2006-01-02 15:04:05" this can be said in other words as "2 January 2006 3 hours 4 minutes 5 seconds".

# EXTRAS:
1. For a function, variable etc to be exported in another file its initial should always be in Capital (Uppercase)
2. A module is the name of the project and under it comes all other packages and files.
3. A buffered Reader is a type of reader that reads from an underlying source, such as a file or a standard input (keyboard) and stores that in a buffer.
4. A buffer is a temporary storage area in the memory. Buffered Reader are usually used to improve the efficiency of the input operations.
5. A `%q` format specifier is used to show quoted string. Generally strings are represented without qoutes. This specifier represents strings wrapped around qoutes.