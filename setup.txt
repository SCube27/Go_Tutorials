# For Setting up a GO project:

1. Create a directory ```mkdir <directory_name>```
2. ```cd <directory_name>```
3. Create a modules file for GO inside the directory ```go mod init <module_name>```
4. Start creating your files and writing code

# Short Notes:

PACKAGES:
1. In GO there are no classes rather we use packages to write files. Every file should contain a package name in their header, that indicates this particular file belongs to this particular package.
2. The main package is a special package in GO, an executable program should contain a main package.
3. [IMP] In GO, in a single directory all files should be under same package, this means in a directory if a file already contains a package main, then we can't create a new file with another package.
4. We created a utils folder, it contains a file with package name 'myutil' so now all the files in this folder should be under package myutil.

VARIABLES:
1. In GO, variables are defined by the var keyword followed by their name and datatype of the variable, this can be showed as ```var name string = "Sahil"```
2. We can also store variables without defining its datatype, which later on during compile time will be automatically assumed by the GO compiler, this is as follows ```var name = "Sahil"```
3. [IMP] In the first case the variable is declared to be a string and hence no other kind of data can be stored in it, on the other hand in the second case the variable is kept on an open end so it has no definite datatype and hence its datatype can be changed whenever required.
4. Variables that are defined using const keyword will have a constant value and their values won't change. So once assigned their values can't be reassigned in the same file. (Same like JavaScript)
5. [IMP] We can also declare a variable without its type (var, const) and without its datatype using the `:=` operator. This is usually used when taking and storing a value from a called function.

PRINT STATEMENTS:
1. Println() : This function is usually adds a space between print string and variables being printed. Besides it also assumes new Println() function will print on new line, so everytime an new Println() function will be added in the code it will be printed on a new line.
2. Printf() : This function is usually used for formatting strings present in it, in user specific way using format specifiers (%d for specifying integers, %f for float values, %T for type of variables, %s for strings). This function doesnt do anything on its own, even to move the cursor to the next line we've to specify here '\n'. So even if there are multiple Printf() lines in the code they'll be printed in the same line if not specified.
3. The format specifiers are basically represent the associated variables passed in the function, these specifiers are replaced by the variables during the compile time.

USER INPUTS:
1. To read the inputs from the user, for a normal program we usually use the Scan() method from the `fmt` package.
2. We can declare a variable and insert the console input into that variable using the Scan() method, as it scans for input in the console.
3. The problem with the Scan() is that is only reads a string either until it's end or if it reaches a whitespace so the strings like "Roronoa Zoro" won't work.
4. For this we can use the NewReader() function from the bufio package. 
5. This creates a new buffered reader that reads through the console or standard input (Stdin this function is in the os package). 

FUNCTIONS:
1. A function in GO is declared using the 'func' keyword continued by function name.
2. The datatypes of the parameters are declared after the signature same as declaring a variable.
3. The return type of the function is stated after the parameters of the function are stated. Outside the parenthesis.
4. If there are multiple parameters of same type in the function then we can declare the data type only once too. For e.g 
    ```
    func numbers(a, b, c int) {

    }
    ```
5. In above example all the numbers are of same types.
6. If we declare a named variable in the return type then we don't need to specify the variable while returning, only return statement works.
7. If a function has multiple return types then we can declare them inside parenthesis after the parameters.

ERROR HANDLING:
1. [IMP] The error handling in GO can be done using returning multiple datatypes from the function, one will be the functions general return type and other would be the error to be returned.
2. This means while returning any vaule from the function either it is a normal case or an error case, we return multiple values. One will be the actual output and other would be the error to be returned.
3. In normal case where there are no errors, we can return `nil` instead of error, representing no error.
4. [IMP] Now when, calling such functions and storing the values in the variables there are multiple values incoming which means they can't be stored in a single variable. For this we use the underscore (_) identifier alongside the normal variable.
5. The underscore variable represents values that are not so important and can be ignored and discarded. Since error is incoming which is of no longer use in the further functioning of program we store it in `_` so it's discarded.
6. We can also use a normal variable named `err` too instead of `_` but then the program would suggest to use it which isn't the case in `_` identifier.
7. For dedicated errors present in the function using `error` data type (inbuilt Golang datatype) is recommended to the users. Such errors can be returned using the `Errorf()` method of `fmt` package.

# EXTRAS:
1. For a function, variable etc to be exported in another file its initial should always be in Capital (Uppercase)
2. A module is the name of the project and under it comes all other packages and files.
3. A buffered Reader is a type of reader that reads from an underlying source, such as a file or a standard input (keyboard) and stores that in a buffer.
4. A buffer is a temporary storage area in the memory. Buffered Reader are usually used to improve the efficiency of the input operations.